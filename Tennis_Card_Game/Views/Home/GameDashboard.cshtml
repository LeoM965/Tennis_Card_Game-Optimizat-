@model GameDashboardViewModel
@{
    ViewData["Title"] = "Tennis Card Battle Dashboard";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <h1 class="header-title text-center">Tennis Card Battle Dashboard</h1>
            <p class="header-subtitle text-center">Game statistics and insights</p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="stats-card stats-card-primary">
                <h5 class="stats-card-title">Total Players</h5>
                <h2 class="stats-card-value">@Model.TotalPlayers</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="stats-card stats-card-success">
                <h5 class="stats-card-title">Total Cards</h5>
                <h2 class="stats-card-value">@Model.TotalCards</h2>
            </div>
        </div>
        <div class="col-md-4">
            <div class="stats-card stats-card-info">
                <h5 class="stats-card-title">Total Matches</h5>
                <h2 class="stats-card-value">@Model.TotalMatches</h2>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="table-card">
                <div class="table-card-header">
                    <h5 class="table-card-title">Top Players</h5>
                </div>
                <div class="table-card-body">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Player</th>
                                <th>Style</th>
                                <th>Level</th>
                                <th>Energy</th>
                                <th>Momentum</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.TopPlayers.Count; i++)
                            {
                                Player player = Model.TopPlayers[i];
                                <tr>
                                    <td>@(i + 1)</td>
                                    <td>@player.Name</td>
                                    <td>@player.PlayingStyle.Name</td>
                                    <td>@player.Level</td>
                                    <td>@player.CurrentEnergy/@player.MaxEnergy</td>
                                    <td>
                                        @switch (player.Momentum)
                                        {
                                            case "InForm":
                                                <span class="badge badge-success">In Form</span>
                                                break;
                                            case "UnderPressure":
                                                <span class="badge badge-danger">Under Pressure</span>
                                                break;
                                            default:
                                                <span class="badge badge-secondary">Neutral</span>
                                                break;
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="table-card">
                <div class="table-card-header">
                    <h5 class="table-card-title">Most Popular Cards</h5>
                </div>
                <div class="table-card-body">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Rank</th>
                                <th>Card</th>
                                <th>Category</th>
                                <th>Usage</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.PopularCards.Count; i++)
                            {
                                CardStatistic card = Model.PopularCards[i];
                                <tr>
                                    <td>@(i + 1)</td>
                                    <td>@card.CardName</td>
                                    <td>@card.CategoryName</td>
                                    <td>@card.UsageCount</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="table-card">
                <div class="table-card-header">
                    <h5 class="table-card-title">Surface Statistics</h5>
                </div>
                <div class="table-card-body">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Surface</th>
                                <th>Matches</th>
                                <th>Avg. Games/Set</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (SurfaceStatistic surfaceStat in Model.SurfaceStatistics)
                            {
                                <tr>
                                    <td>@surfaceStat.SurfaceName</td>
                                    <td>@surfaceStat.MatchCount</td>
                                    <td>@surfaceStat.AverageGamesPerSet.ToString("F1")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="table-card">
                <div class="table-card-header">
                    <h5 class="table-card-title">Playing Style Distribution</h5>
                </div>
                <div class="table-card-body">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Style</th>
                                <th>Players</th>
                                <th>Percentage</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int totalStylePlayers = Model.StyleDistribution.Sum(sd => sd.PlayerCount);
                            }
                            @foreach (PlayingStyleDistribution style in Model.StyleDistribution)
                            {
                                double percentage = totalStylePlayers > 0
                                ? (style.PlayerCount * 100.0 / totalStylePlayers)
                                : 0;
                                <tr>
                                    <td>@style.StyleName</td>
                                    <td>@style.PlayerCount</td>
                                    <td>@percentage.ToString("F1")%</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="table-card">
                <div class="table-card-header">
                    <h5 class="table-card-title">Recent Matches</h5>
                </div>
                <div class="table-card-body">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Tournament</th>
                                <th>Players</th>
                                <th>Surface</th>
                                <th>Score</th>
                                <th>Winner</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (Match match in Model.RecentMatches)
                            {
                                Player winner = match.WinnerId == match.Player1Id ? match.Player1 : match.Player2;

                                <tr>
                                    <td>@match.EndTime?.ToString("dd MMM yyyy")</td>
                                    <td>@(match.Tournament?.Name ?? "Friendly Match")</td>
                                    <td>@match.Player1.Name vs @match.Player2.Name</td>
                                    <td>@match.Surface.Name</td>
                                    <td>@match.Player1Sets - @match.Player2Sets</td>
                                    <td>@winner.Name</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
body {
    font-family: 'Roboto', Arial, sans-serif;
    background-color: #f5f7fa;
    color: #333;
}

.container-fluid {
    padding: 0 30px;
}

.header-title {
    color: #2c3e50;
    font-weight: 700;
    margin-bottom: 10px;
}

.header-subtitle {
    color: #7f8c8d;
    font-size: 1.2rem;
}

.stats-card {
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    text-align: center;
    color: white;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s;
}

.stats-card:hover {
    transform: translateY(-5px);
}

.stats-card-primary {
    background: linear-gradient(135deg, #3498db, #2980b9);
}

.stats-card-success {
    background: linear-gradient(135deg, #2ecc71, #27ae60);
}

.stats-card-info {
    background: linear-gradient(135deg, #1abc9c, #16a085);
}

.stats-card-title {
    font-size: 1.2rem;
    margin-bottom: 15px;
    font-weight: 600;
}

.stats-card-value {
    font-size: 2.5rem;
    font-weight: 700;
}

.table-card {
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-bottom: 30px;
    background-color: white;
}

.table-card-header {
    background-color: #2c3e50;
    color: white;
    padding: 15px 20px;
}

.table-card-title {
    margin: 0;
    font-size: 1.2rem;
    font-weight: 600;
}

.table-card-body {
    padding: 0;
}

.data-table {
    width: 100%;
    border-collapse: collapse;
}

.data-table th {
    background-color: #f8f9fa;
    color: #2c3e50;
    padding: 12px 15px;
    text-align: left;
    font-weight: 600;
    border-bottom: 2px solid #e9ecef;
}

.data-table td {
    padding: 12px 15px;
    border-bottom: 1px solid #e9ecef;
}

.data-table tr:hover {
    background-color: #f8f9fa;
}

.data-table tr:last-child td {
    border-bottom: none;
}

.badge {
    display: inline-block;
    padding: 5px 10px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
}

.badge-success {
    background-color: #2ecc71;
    color: white;
}

.badge-danger {
    background-color: #e74c3c;
    color: white;
}

.badge-secondary {
    background-color: #95a5a6;
    color: white;
}

@@media (max-width: 768px) {
    .container-fluid {
        padding: 0 15px;
    }
    
    .stats-card-value {
        font-size: 2rem;
    }
}
</style>